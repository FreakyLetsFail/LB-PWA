/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/csv-parser";
exports.ids = ["vendor-chunks/csv-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/csv-parser/index.js":
/*!******************************************!*\
  !*** ./node_modules/csv-parser/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { Transform } = __webpack_require__(/*! stream */ \"stream\");\nconst [cr] = Buffer.from(\"\\r\");\nconst [nl] = Buffer.from(\"\\n\");\nconst defaults = {\n    escape: '\"',\n    headers: null,\n    mapHeaders: ({ header })=>header,\n    mapValues: ({ value })=>value,\n    newline: \"\\n\",\n    quote: '\"',\n    raw: false,\n    separator: \",\",\n    skipComments: false,\n    skipLines: null,\n    maxRowBytes: Number.MAX_SAFE_INTEGER,\n    strict: false\n};\nclass CsvParser extends Transform {\n    constructor(opts = {}){\n        super({\n            objectMode: true,\n            highWaterMark: 16\n        });\n        if (Array.isArray(opts)) opts = {\n            headers: opts\n        };\n        const options = Object.assign({}, defaults, opts);\n        options.customNewline = options.newline !== defaults.newline;\n        for (const key of [\n            \"newline\",\n            \"quote\",\n            \"separator\"\n        ]){\n            if (typeof options[key] !== \"undefined\") {\n                [options[key]] = Buffer.from(options[key]);\n            }\n        }\n        // if escape is not defined on the passed options, use the end value of quote\n        options.escape = (opts || {}).escape ? Buffer.from(options.escape)[0] : options.quote;\n        this.state = {\n            empty: options.raw ? Buffer.alloc(0) : \"\",\n            escaped: false,\n            first: true,\n            lineNumber: 0,\n            previousEnd: 0,\n            rowLength: 0,\n            quoted: false\n        };\n        this._prev = null;\n        if (options.headers === false) {\n            // enforce, as the column length check will fail if headers:false\n            options.strict = false;\n        }\n        if (options.headers || options.headers === false) {\n            this.state.first = false;\n        }\n        this.options = options;\n        this.headers = options.headers;\n    }\n    parseCell(buffer, start, end) {\n        const { escape, quote } = this.options;\n        // remove quotes from quoted cells\n        if (buffer[start] === quote && buffer[end - 1] === quote) {\n            start++;\n            end--;\n        }\n        let y = start;\n        for(let i = start; i < end; i++){\n            // check for escape characters and skip them\n            if (buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote) {\n                i++;\n            }\n            if (y !== i) {\n                buffer[y] = buffer[i];\n            }\n            y++;\n        }\n        return this.parseValue(buffer, start, y);\n    }\n    parseLine(buffer, start, end) {\n        const { customNewline, escape, mapHeaders, mapValues, quote, separator, skipComments, skipLines } = this.options;\n        end-- // trim newline\n        ;\n        if (!customNewline && buffer.length && buffer[end - 1] === cr) {\n            end--;\n        }\n        const comma = separator;\n        const cells = [];\n        let isQuoted = false;\n        let offset = start;\n        if (skipComments) {\n            const char = typeof skipComments === \"string\" ? skipComments : \"#\";\n            if (buffer[start] === Buffer.from(char)[0]) {\n                return;\n            }\n        }\n        const mapValue = (value)=>{\n            if (this.state.first) {\n                return value;\n            }\n            const index = cells.length;\n            const header = this.headers[index];\n            return mapValues({\n                header,\n                index,\n                value\n            });\n        };\n        for(let i = start; i < end; i++){\n            const isStartingQuote = !isQuoted && buffer[i] === quote;\n            const isEndingQuote = isQuoted && buffer[i] === quote && i + 1 <= end && buffer[i + 1] === comma;\n            const isEscape = isQuoted && buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote;\n            if (isStartingQuote || isEndingQuote) {\n                isQuoted = !isQuoted;\n                continue;\n            } else if (isEscape) {\n                i++;\n                continue;\n            }\n            if (buffer[i] === comma && !isQuoted) {\n                let value = this.parseCell(buffer, offset, i);\n                value = mapValue(value);\n                cells.push(value);\n                offset = i + 1;\n            }\n        }\n        if (offset < end) {\n            let value = this.parseCell(buffer, offset, end);\n            value = mapValue(value);\n            cells.push(value);\n        }\n        if (buffer[end - 1] === comma) {\n            cells.push(mapValue(this.state.empty));\n        }\n        const skip = skipLines && skipLines > this.state.lineNumber;\n        this.state.lineNumber++;\n        if (this.state.first && !skip) {\n            this.state.first = false;\n            this.headers = cells.map((header, index)=>mapHeaders({\n                    header,\n                    index\n                }));\n            this.emit(\"headers\", this.headers);\n            return;\n        }\n        if (!skip && this.options.strict && cells.length !== this.headers.length) {\n            const e = new RangeError(\"Row length does not match headers\");\n            this.emit(\"error\", e);\n        } else {\n            if (!skip) this.writeRow(cells);\n        }\n    }\n    parseValue(buffer, start, end) {\n        if (this.options.raw) {\n            return buffer.slice(start, end);\n        }\n        return buffer.toString(\"utf-8\", start, end);\n    }\n    writeRow(cells) {\n        const headers = this.headers === false ? cells.map((value, index)=>index) : this.headers;\n        const row = cells.reduce((o, cell, index)=>{\n            const header = headers[index];\n            if (header === null) return o // skip columns\n            ;\n            if (header !== undefined) {\n                o[header] = cell;\n            } else {\n                o[`_${index}`] = cell;\n            }\n            return o;\n        }, {});\n        this.push(row);\n    }\n    _flush(cb) {\n        if (this.state.escaped || !this._prev) return cb();\n        this.parseLine(this._prev, this.state.previousEnd, this._prev.length + 1) // plus since online -1s\n        ;\n        cb();\n    }\n    _transform(data, enc, cb) {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data);\n        }\n        const { escape, quote } = this.options;\n        let start = 0;\n        let buffer = data;\n        if (this._prev) {\n            start = this._prev.length;\n            buffer = Buffer.concat([\n                this._prev,\n                data\n            ]);\n            this._prev = null;\n        }\n        const bufferLength = buffer.length;\n        for(let i = start; i < bufferLength; i++){\n            const chr = buffer[i];\n            const nextChr = i + 1 < bufferLength ? buffer[i + 1] : null;\n            this.state.rowLength++;\n            if (this.state.rowLength > this.options.maxRowBytes) {\n                return cb(new Error(\"Row exceeds the maximum size\"));\n            }\n            if (!this.state.escaped && chr === escape && nextChr === quote && i !== start) {\n                this.state.escaped = true;\n                continue;\n            } else if (chr === quote) {\n                if (this.state.escaped) {\n                    this.state.escaped = false;\n                // non-escaped quote (quoting the cell)\n                } else {\n                    this.state.quoted = !this.state.quoted;\n                }\n                continue;\n            }\n            if (!this.state.quoted) {\n                if (this.state.first && !this.options.customNewline) {\n                    if (chr === nl) {\n                        this.options.newline = nl;\n                    } else if (chr === cr) {\n                        if (nextChr !== nl) {\n                            this.options.newline = cr;\n                        }\n                    }\n                }\n                if (chr === this.options.newline) {\n                    this.parseLine(buffer, this.state.previousEnd, i + 1);\n                    this.state.previousEnd = i + 1;\n                    this.state.rowLength = 0;\n                }\n            }\n        }\n        if (this.state.previousEnd === bufferLength) {\n            this.state.previousEnd = 0;\n            return cb();\n        }\n        if (bufferLength - this.state.previousEnd < data.length) {\n            this._prev = data;\n            this.state.previousEnd -= bufferLength - data.length;\n            return cb();\n        }\n        this._prev = buffer;\n        cb();\n    }\n}\nmodule.exports = (opts)=>new CsvParser(opts);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/csv-parser/index.js\n");

/***/ })

};
;